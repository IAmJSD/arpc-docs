---
import "@/global.css";
import { ClientRouter } from "astro:transitions";

interface Props {
    title: string;
    description: string;
}

const { title, description } = Astro.props;

const pageTitle = title ? `${title} | arpc` : "arpc";
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
        <title>{pageTitle}</title>
        <meta name="description" content={description} />
        <meta name="twitter:image" content="/favicon.svg" />
        <meta name="og:type" content="website" />
        <meta name="og:title" content={pageTitle} />
        <meta name="og:description" content={description} />
        <meta name="og:url" content="https://arpc.dev" />
        <link rel="sitemap" type="application/xml" href="/sitemap-index.xml" />
        <ClientRouter />
	</head>

	<body transition:animate="none" class="dark:bg-slate-950 dark:text-white overflow-x-hidden">
        <script is:inline>
            // The sidebar data is needed across the whole app.
            if (!window.__SIDEBAR_DATA__) window.__SIDEBAR_DATA__ = fetch("/sidebar.json").then((res) => res.json());
        </script>
		<slot />
	</body>
</html>

<script>
    // Every browser except Chrome has suddenly decided to break the favicon.svg file outside of
    // the site icon. This is a fix for that, applied globally since it is used globally.
    const isChrome = navigator.userAgent.includes("Chrome");
    if (!isChrome) {
        const FAVICON_FETCH_RESULT = fetch("/favicon.svg").then((r) => r.text());
        document.addEventListener("astro:page-load", async () => {
            const els = document.querySelectorAll("[data-logo-dark-fix]");
            for (const el of els) {
                // Parse the SVG. TS is wrong here.
                const parsedSvg = new DOMParser().parseFromString(
                    await FAVICON_FETCH_RESULT, "image/svg+xml",
                ).documentElement as unknown as SVGElement;

                // Go through this elements attributes and apply them to the new SVG.
                for (const attr of el.attributes) {
                    if (attr.name === "data-logo-dark-fix" || attr.name === "src") continue;
                    parsedSvg.setAttribute(attr.name, attr.value);
                }

                // Replace the element with the new SVG.
                el.replaceWith(parsedSvg);
            }
        });
    }
</script>
